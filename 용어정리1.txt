[웹개발상식]

Server : 기능을 제공하는 컴퓨터

Client : 기능을 요청하고 이용하는 고객 컴퓨터


	  요청(Request)	 --->
Client				Server
	   <---	응답(Response)

------------------------------------------------

HTTP(Hyper Text Transfer Protocol)
- 서버 <-> 클라이언트 사이의
  HTML 요청-응답 전송(전달) 규약
  (인터넷에서 HTML을 주고받을 때의 약속)

HTTPS -> 보안인증붙은거임(Security)
	 돈듬

IP(Internet Protocol)
 : 인터넷/네트워크를 통해 데이터를 송수신하는 규약
   -> 	인터넷 네트워크에 연결된 각종 통신기기를
	구분하는 주소
	(컴퓨터, 휴대폰, 결제단말기, 냉장고, 버스, 비행기 등등)

   (링크-로컬 IPv6 주소 . . . . : fe80::52c1:e6ed:333e:35e%6)
   (IPv4 주소 . . . . . . . . . : 192.168.10.124)

	(IPv4 : 한칸에 0~255(2^8)사이 숫자 4번)
	(IPv6 : 2^4 2^4 2^4 2^4 -> 한칸)

Port 번호 : 컴퓨터 내 프로그램을 구분하는 식별 번호

	IP + Port 번호를 알아야
	다른 컴퓨터(서버)에 요청을 할 수 있다
	 ex)http://192.168.10.5:8080

	HTTP 포트번호 중 80번
	- http:// 요청시 80번 포트는 생략 가능!
	(참고 : https는 443번 생략 가능)

	ex) http://localhost:80
	    == http://localhost	

------------------------------------------------

	webapp 폴더 안에서 수정되는 파일은
	서버 안껏다 켜도 조금있으면?
	적용됨
------------------------------------------------

	vs코드 확장프로그램 
	JSP Language Support
	JSTL Snippets
	
------------------------------------------------

	JSP -> Servlet 변환
	Servlet == JSP
	JSP : html로 적음
	Servlet : java로 적음

------------------------------------------------




[EL]

- EL 구문 내 연산 시 parsing 자동으로 일어남


- 파라미터 얻어오는 법
1) ${param.key} -> String
2) ${paramValues.key}  -> String[]

- 데이터 유지 범위별 객체에 세팅된 속성 얻어오기

page        -> ${pageScope.key}
request     -> ${requestScope.key}
session     -> ${sessionScope.key}
application -> ${applicationScope.key}

- 만약 ${key}만 입력하게 되는 경우
 -> 좁은 범위의 객체부터 탐색하여 
   일치하는 key가 있으면 출력
   
   
- EL의 특징
1) null, NullPointerException을 빈 문자열로 처리

2) 출력용 언어라 set이 없음
   -> 모두 get -> get 생략 
    ex)   ${book.getName()}  -> ${book.name}


------------------------------------------------------

[JSTL]
- Jsp Standard Tag Library
- 아파치에서 JSP에서 자주 사용하는 Java 구문을
  태그형태로 만들어서 제공해주는 라이브러리

- 라이브러리란? 
  남들이 만들어서 준 클래스(코드)
  -> 제공해준 기능을 사용하면됨



- JSTL을 사용하기 위해서 해야하는 것들
1) 라이브러리 다운로드

2) webapp/WEB-INT/lib 폴더에 라이브러리 추가

3) 사용하려는 JSP 위에 <%@ taglib %> 작성


- 변수 선언(범위 객체에 속성 추가(setAttribute))
 <c:set var="" value="" scope="" />
 
- 변수 제거(removeAttribute)
 <c:remove var="" scope="" />
 
- 단일 조건문(else 없음!)
 <c:if test="${}>
 
- 연속된 조건문
 <c:choose>
    <c:when test="${}">
    </c:when>
    
   <c:otherwise>
   </c:otherwise>
 </c:choose>
 
 
 - 일반 for문 + 향상된 for문
 
 <c:forEach var="" begin="" end="" step="" 
        items="" varStatus="">

 </c:forEach>


- 문자열, 배열, 컬력션 길이 
 ${fn:length( 문자열|배열|컬렉션 )}
 
 
- null 또는 비어있으면 true
 ${empty key|값}


================================================



[폴더구조]

* webapp 폴더
- 배포되는폴더
- JSP forward 경로의 기준
- 웹 요청주소 기준

	* WEB-INF
	- 클라이언트가 주소로 직접 요청할 수 없는폴더(숨겨져있음)
	- 서버는 접근가능


	* resources 폴터
	- 정적(static) 자원을 모아두는 폴더
	- html, css, js, images 등이 모아두는 폴더


[요청]

* ip:port / 요청 -> webapp폴더 바로아래 index.html/jsp가 응답
ex) localhost:8080/

* Forward (요청위임)
- 요청을 받은 Servlet/jsp가
  HttpServletRequest, HttpServletResponse 객체를
	다른 Servlet/JSP로 위임하여 대신 응답처리하게 하는 것

- 기존 HttpServletRequest, HttpServletResponse 가 계속 유지되어 넘어감
- 브라우저는 첫 요청주소로 표기되어짐

* Redirect
- 요청받은 Servlet/JSP가 직접 응답하는것이 아닌
	다른 Servlet/JSP를 요청하는것

- 보통은 Servlet이 요청을 받았는데 별도의 응답결과가 없을 경우 사용
	ex) 메인페이지 -> 로그인요청 -> 성공/실패 -> 메인페이지
		-> 로그인 성공/실패 페이지 없이 다시 메인페이지로 보여지게 함
		-> 로그인 요청 Servlet은 별도 응답 결과가 없기 때문에
		   메인 페이지로 redirect(재요청)

- 기존 HttpServletRequest, HttpServletResponse가
  유지되지 않고 새롭게 만들어짐
	-> requestScope 객체로 데이터 전달이 불가능
	---> session/application scope 객체를 이용

	=======================================

	[CRUD]

	C : create	새로만듬
	R : read		조회
	U : update	수정
	D : delete	삭제